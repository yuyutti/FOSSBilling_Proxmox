{% import 'macro_functions.html.twig' as mf %}
{% extends "layout_default.html.twig" %}
{% block meta_title %}
   {{ 'Manage IP Range' | trans }}
{% endblock %}
{% set active_menu = 'proxmox' %}

{% block content %}
   <div class="card">
      <div class="card-body">
         <h2>
            Manage IP Range:  {{ iprange.cidr }}
         </h2>
      </div>
      <div class="card-body">
         <form method="post" action="admin/serviceproxmox/iprange_update" id="iprange-update" class="api-form" data-api-msg="IP Range updated">
            <input type="hidden" name="CSRFToken" value="{{ CSRFToken }}" />
            <input type="hidden" name="id" value="{{ iprange.id }}" />
            <div class="mb-3 row">
                  <label class="form-label col-3 col-form-label">
                     {{ 'Name' | trans }}:    
                  </label>
                  <div class="col">
                     <input class="form-control" type="text" id='cidr' name="cidr" value="{{ iprange.cidr }}" required placeholder="{{ 'CIDR Range' | trans }}">
                  </div>
            </div>
            <div class="mb-3 row">
                  <label class="form-label col-3 col-form-label">
                     {{ 'Gateway' | trans }}:
                  </label>
                  <div class="col">
                     <input class="form-control" type="text-area" name="gateway" value="{{ iprange.gateway }}" required placeholder="{{ 'Gateway' | trans }}">
                  </div>
            </div>
            <div class="mb-3 row">
               <label class="form-label col-3 col-form-label">
                  {{ 'Subnet Size' | trans }}:                                                                    
               </label>
               <div class="col-md-5">
                  <input id="subnet_size" class="form-range" type="range" id='subnet_size' name="subnet_size" value="1" min="1" max="24" step="1" oninput="updateOutput(this.value);">
               </div>
               <div class="col-md-2">
                  <output id="subnet_sizeOutput" name="subnet_sizeOutput" for="subnet_size">
                     1 Adress, /32
                  </output>
               </div>
            </div>
            <div class="mb-3 row">
                  <label class="form-label col-3 col-form-label">
                     {{ 'Broadcast' | trans }}:
                  </label>
                  <div class="col">
                     <input class="form-control" type="text-area" id='broadcast' name="broadcast" value="{{ iprange.broadcast }}" required placeholder="{{ 'Broadcast' | trans }}">
                  </div>
            </div>
            <div class="mb-3 row">
                  <label class="form-label col-3 col-form-label">
                     {{ 'IP Address Type' | trans }}:                                                                            
                  </label>
                  <div class="col">
                     <div class="form-check form-check-inline">
                        <input class="form-check-input" id="radioTypePublic" type="radio" name="type" value="{{ iprange.type }}" {% if iprange.type == 'public' %} checked {% endif %}>   
                        <label class="form-check-label" for="radioTypePublic">
                              {{ 'Public' | trans }}
                        </label>
                     </div>
                     <div class="form-check form-check-inline">
                        <input class="form-check-input" id="radioTypePrivate" type="radio" name="type" value="{{ iprange.type }}" {% if iprange.type == 'private' %} checked {% endif %}>   
                        <label class="form-check-label" for="radioTypePrivate">
                              {{ 'Private' | trans }}
                        </label>
                     </div>
                  </div>
            </div>
            <input type="submit" value="{{ 'Save IP Range' | trans }}" class="btn btn-primary">
         </form>
      </div>
   </div>
{% endblock %}
{% block js %}
   <script>
      function calculateIPRange(ip, cidr) {
         var subnet = Math.pow(2, 32 - cidr);
         var ipLong = ip2long(ip);
     
         var ipStart = ipLong & (~(subnet - 1));
         var ipEnd = ipStart + subnet - 1;
     
         return [long2ip(ipStart), long2ip(ipEnd)];
     }
     
     function ip2long(ip) {
         var parts = ip.split('.');
         var result = 0;
         for (var i = 0; i < 4; i++) {
             result += parseInt(parts[i]) * Math.pow(2, 24 - (8 * i));
         }
         return result;
     }
     
     function long2ip(ip) {
         var result = [];
         for (var i = 3; i >= 0; i--) {
             var part = Math.floor(ip / Math.pow(2, 8 * i));
             ip -= part * Math.pow(2, 8 * i);
             result.push(part);
         }
         return result.join('.');
     }
     
     function updateOutput(value) {
         var output = document.getElementById('subnet_sizeOutput');
         var cidrInput = document.getElementById('cidr');
         var ip = cidrInput.value.split('/')[0]; 
         var ipRange = calculateIPRange(ip, 32 - value);
     
         output.value = Math.pow(2, value) + ' Address(es), /' + (32 - value) + ', IP Range: ' + ipRange[0] + ' - ' + ipRange[1];
         cidrInput.value = ip + '/' + (32 - value); 
         document.getElementById('broadcast').value = ipRange[1];
     }
     
     document.addEventListener('DOMContentLoaded', function() {
         var subnetSizeInput = document.getElementById('subnet_size');
         var cidrInput = document.getElementById('cidr');
     
         var cidr = parseInt(cidrInput.value.split('/')[1]);
         subnetSizeInput.value = 32 - cidr;
         updateOutput(subnetSizeInput.value);
     
         subnetSizeInput.addEventListener('input', function() {
             updateOutput(this.value);
         });
     });
     
       
   </script>
{% endblock %}